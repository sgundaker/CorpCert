@{
    Layout = null;
    L2Test.Helpers.TakeTest ListHelp = new L2Test.Helpers.TakeTest();
    string TechID = Path.GetFileName(Request.Url.ToString());
    ViewBag.TechID = TechID;
    ViewBag.ResultsURL = Url.Action("TestResults", "Home", routeValues: null, protocol: Request.Url.Scheme);
    ViewBag.ArchiveURL = Url.Action("TestArchive", "Home", routeValues: null, protocol: Request.Url.Scheme);
}

<!DOCTYPE html>

<html>
<!--
    
 _____           _           _     _         _      _____   _____         _   
|  __ \         | |         | |   | |       | |    / __  \ |_   _|       | |  
| |  \/ ___   __| | __ _  __| | __| |_   _  | |    `' / /'   | | ___  ___| |_ 
| | __ / _ \ / _` |/ _` |/ _` |/ _` | | | | | |      / /     | |/ _ \/ __| __|
| |_\ \ (_) | (_| | (_| | (_| | (_| | |_| | | |____./ /___   | |  __/\__ \ |_ 
 \____/\___/ \__,_|\__,_|\__,_|\__,_|\__, | \_____/\_____/   \_/\___||___/\__|
                                      __/ |                                   
                                     |___/                                    
    
Your test is timed, don't waste that time looking at source code!
-->
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <title>L2 Test</title>
</head>
<body>
    <section class="TestPageContent">
        <div class="TimerFloat">
            <center><div id="timer">...Starting Timer</div></center>
        </div>
        <div class="SubmitFloat">
            <center><button id="SubmitButton" name="SubmitButton" class="btn btn-info" onclick="SanityCheck();">Submit Test for Grading</button></center>
        </div>
        <div>
            <ul class="Test" style="list-style-type:none">
                @Html.Raw(ListHelp.StartTest())
            </ul>
        </div>
    </section>
    <script src="../../Scripts/jquery-1.10.2.js"></script>
    <script src="../../Scripts/bootstrap.js"></script>
    <script src="../../Scripts/respond.js"></script>
    <script>
        //This script section needs to use jquery so that the above file paths are broken when archived preventing the selected answers from being changed and the test from being submitted.

        //Toggle which answer is selected
        $('.TestAnswer').click(function () {
            $(this).toggleClass('SelectedAnswer');
        });
        $('.SelectedAnswer').click(function () {
            $(this).toggleClass('TestAnswer');
        });

        //Show Comment box
        $('.ShowComment').click(function () {
            $(this).next('.HideComment').show();
        });

        //Count down time left before test auto submits
        var timeInMinutes = @(ViewBag.TimeToTakeTest);
        var currentTime = Date.parse(new Date());
        var deadline = new Date(currentTime + timeInMinutes * 60000);//60000 milliseconds in a minute
        var testSubmitted = false;

        $(document).ready(startTimer(deadline));

        function startTimer(endtime) {
            var timer = document.getElementById('timer');
            var changeTime = setInterval(function myTimer() {
                var timeRemaining = getTimeRemaining(endtime);
                timer.innerHTML = 'Time Remaining: ' + timeRemaining.minutes + ':' + ('0' + timeRemaining.seconds).slice(-2);
                if (timeRemaining.total <= 0 && testSubmitted != true) {
                    clearInterval(changeTime);
                    SendAnswers();
                }
            }, 1000);
        }

        function getTimeRemaining(endtime) {
            var timeRemaining = Date.parse(endtime) - Date.parse(new Date());
            var seconds = Math.floor((timeRemaining / 1000) % 60); //1000 milliseconds in second, modulus 60 to only get remainder  after minutes have been accounted for.
            var minutes = Math.floor((timeRemaining / 60000)); //60000 milliseconds in a minute

            return {
                'total': timeRemaining,
                'minutes': minutes,
                'seconds': seconds
            };
        }

        function SendAnswers() {

            var tech = '@(ViewBag.TechID)';
            var htmlString = document.documentElement.innerHTML;

            //send snapshot of HTML before grading
            $.ajax({
                url: "@(ViewBag.ArchiveURL)",
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify({ html: htmlString, tech: tech }),
            });

            var list = [];

            for (var i = 0; i < document.getElementsByTagName("li").length; i++) {
                var answer = {};
                var answers = [];
                var currentQuestion = document.getElementsByTagName("li")[i];

                answer.tech = tech;
                answer.question = currentQuestion.getAttribute("id");

                for (var n = 0; n < currentQuestion.childNodes.length; n++) {
                    currentNode = currentQuestion.childNodes[n];
                    if (currentNode.className == "TestAnswer SelectedAnswer") {
                        answers.push(currentNode.id);
                    }
                    else if (currentNode.className == "comment-box") {
                        var findComment = currentNode.childNodes[1];
                        answer.comment = findComment.childNodes[0].value;
                    }
                }

                answer.answers = answers;
                list.push(answer);
            }

            //Submit results for grading
            $.ajax({
                url: "@(ViewBag.ResultsURL)",
                type: "POST",
                contentType: "application/json",
                dataType: "text",
                data: JSON.stringify(list),
                success: function (data) {
                    $('.TestPageContent').html(data);
                },
                error: function () {
                    alert("Test not graded, a lead will need to manually grade this test.");
                }
            });

            testSubmitted = true;
        }

        function SanityCheck(){
            var htmlString = document.documentElement.innerHTML;
            var answered = 0;
            var total = 0;

            for (var i = 0; i < document.getElementsByTagName("li").length; i++) {
                var selected = false;
                var currentQuestion = document.getElementsByTagName("li")[i];
                total++;

                for (var n = 0; n < currentQuestion.childNodes.length; n++) {
                    if (currentQuestion.childNodes[n].className == "TestAnswer SelectedAnswer") {
                        selected = true;
                    }
                }
                if (selected) {
                    answered++;
                }
            }

            //Change to activate a modal with submit button in it
            if(total == answered){
                if (confirm('Are you sure you want to submit your test for grading?')) {
                    SendAnswers();
                } else {
                    // Do nothing!
                }
            }
            else{
                if (confirm("You have " + (total - answered) + " questions without answers. Are you sure you want to submit the answers?")) {
                    SendAnswers();
                } else {
                    // Do nothing!
                }
            }
        }
    </script>
</body>
</html>